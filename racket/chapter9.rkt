#lang dracula

;; Load the J-Bob language:
(include-book "j-bob-lang" :dir :teachpacks)

;; Load J-Bob, our little proof assistant:
(include-book "j-bob" :dir :teachpacks)

;; Chapter 3

(defun defun.pair ()
  (J-Bob/define
   (prelude)
   '(((defun pair (x y)
        (cons x (cons y '())))
      nil))))

(defun defun.first-of ()
  (J-Bob/define
   (defun.pair)
   '(((defun first-of (x)
        (car x))
      nil))))

(defun defun.second-of ()
  (J-Bob/define
   (defun.first-of)
   '(((defun second-of (x)
        (car (cdr x)))
      nil))))

(defun dethm.first-of-pair ()
  (J-Bob/define
   (defun.second-of)
   '(((dethm first-of-pair (a b)
             (equal (first-of (pair a b)) a))
      nil
      ((1 1) (pair a b))
      ((1) (first-of (cons a (cons b 'nil))))
      ((1) (car/cons a (cons b 'nil)))
      (() (equal-same a))))))

(defun dethm.second-of-pair ()
  (J-Bob/define
   (dethm.first-of-pair)
   '(((dethm second-of-pair (a b)
             (equal (second-of (pair a b)) b))
      nil
      ((1) (second-of (pair a b)))
      ((1 1 1) (pair a b))
      ((1 1) (cdr/cons a (cons b '())))
      ((1) (car/cons b '()))
      (() (equal-same b))))))

(defun defun.in-pair? ()
  (J-Bob/define
   (dethm.second-of-pair)
   '(((defun in-pair? (xs)
        (if (equal (first-of xs) '?)
            't
            (equal (second-of xs) '?)))
      nil))))

(defun dethm.in-first-of-pair ()
  (J-Bob/define
   (defun.in-pair?)
   '(((dethm in-first-of-pair (b)
             (equal (in-pair? (pair '? b)) 't))
      nil
      ((1 1) (pair '? b))
      ((1) (in-pair? (cons '? (cons b '()))))
      ((1 Q 1) (first-of (cons '? (cons b '()))))
      ((1 Q 1) (car/cons '? (cons b '())))
      ((1 Q) (equal-same '?))
      ((1) (if-true 't (equal (second-of (cons '? (cons b '()))) '?)))
      (() (equal-same 't))))))

(defun dethm.in-second-of-pair ()
  (J-Bob/define
   (dethm.in-first-of-pair)
   '(((dethm in-second-of-pair (a)
             (equal (in-pair? (pair a '?)) 't))
      nil
      ((1 1) (pair a '?))
      ((1) (in-pair? (cons a (cons '? '()))))
      ((1 Q 1) (first-of (cons a (cons '? '()))))
      ((1 Q 1) (car/cons a (cons '? '())))
      ((1 E 1) (second-of (cons a (cons '? '()))))
      ((1 E 1 1) (cdr/cons a (cons '? '())))
      ((1 E 1) (car/cons '? '()))
      ((1 E) (equal-same '?))
      ((1) (if-same (equal a '?) 't))
      (() (equal-same 't))))))

;; Chapter 4

(defun defun.list0 ()
  (J-Bob/define
   (dethm.in-second-of-pair)
   '(((defun list0? (x)
        (equal x '()))
      nil))))

(defun defun.list1 ()
  (J-Bob/define
   (defun.list0)
   '(((defun list1? (x)
        (if (atom x) 'nil (list0? (cdr x))))
      nil))))

(defun defun.list2 ()
  (J-Bob/define
   (defun.list1)
   '(((defun list2? (x)
        (if (atom x) 'nil (list1? (cdr x))))
      nil))))

(defun dethm.contradiction ()
  (J-Bob/prove
   (list-extend
    (prelude)
    '(defun partial (x)
       (if (partial x) 'nil 't)))
   '(((dethm contradiction () 'nil)
      nil
      (() (if-same (partial x) 'nil))
      ((A) (if-nest-A (partial x) 'nil 't))
      ((E) (if-nest-E (partial x) 't 'nil))
      ((A Q) (partial x))
      ((E Q) (partial x))
      ((A Q) (if-nest-A (partial x) 'nil 't))
      ((E Q) (if-nest-E (partial x) 'nil 't))
      ((A) (if-false 'nil 't))
      ((E) (if-true 't 'nil))
      (() (if-same (partial x) 't))))))

(defun defun.list ()
  (J-Bob/define
   (defun.list2)
   '(((defun list? (x)
        (if (atom x)
            (equal x '())
            (list? (cdr x))))
      (size x)
      ((Q) (natp/size x))
      (() (if-true (if (atom x) 't (< (size (cdr x)) (size x))) 'nil))
      ((E) (size/cdr x))
      (() (if-same (atom x) 't))))))

(defun defun.sub ()
  (J-Bob/define
   (defun.list)
   '(((defun sub (x y)
        (if (atom y)
            (if (equal y '?)
                x
                y)
            (cons (sub x (car y))
                  (sub x (cdr y)))))
      (size y)
      ((Q) (natp/size y))
      (() (if-true (if (atom y)
                       't
                       (if (< (size (car y)) (size y))
                           (< (size (cdr y)) (size y))
                           'nil))
                   'nil))
      ((E Q) (size/car y))
      ((E A) (size/cdr y))
      ((E) (if-true 't 'nil))
      (() (if-same (atom y) 't))))))

;; Chapter 5

(defun defun.memb? ()
  (J-Bob/define
   (defun.sub)
   '(((defun memb? (xs)
        (if (atom xs)
            'nil
            (if (equal (car xs) '?)
                't
                (memb? (cdr xs)))))
      (size xs)
      ((Q) (natp/size xs))
      (() (if-true (if (atom xs)
                       't
                       (if (equal (car xs) '?)
                           't
                           (< (size (cdr xs)) (size xs))))
                   'nil))
      ((E E) (size/cdr xs))
      ((E) (if-same (equal (car xs) '?) 't))
      (() (if-same (atom xs) 't))))))

(defun defun.remb ()
  (J-Bob/define
   (defun.memb?)
   '(((defun remb (xs)
        (if (atom xs)
            '()
            (if (equal (car xs) '?)
                (remb (cdr xs))
                (cons (car xs)
                      (remb (cdr xs))))))
      (size xs)
      ((Q) (natp/size xs))
      (() (if-true (if (atom xs)
                       't
                       (< (size (cdr xs)) (size xs)))
                   'nil))
      ((E) (size/cdr xs))
      (() (if-same (atom xs) 't))))))

(defun dethm.memb?/remb0 ()
  (J-Bob/define
   (defun.remb)
   '(((dethm memb?/remb0 ()
             (equal (memb? (remb '())) 'nil))
      nil
      ((1 1) (remb '()))
      ((1 1 Q) (atom '()))
      ((1 1) (if-true '() (if (equal (car '()) '?)
                              (remb (cdr '()))
                              (cons (car '())
                                    (remb (cdr '()))))))
      ((1) (memb? '()))
      ((1 Q) (atom '()))
      ((1) (if-true 'nil
                    (if (equal (car '()) '?)
                        't
                        (memb? (cdr '())))))
      (() (equal-same 'nil))))))

(defun dethm.memb?/remb1 ()
  (J-Bob/define
   (dethm.memb?/remb0)
   '(((dethm memb?/remb1 (x1)
             (equal (memb? (remb (cons x1 '()))) 'nil))
      nil
      ((1 1) (remb (cons x1 '())))
      ((1 1 Q) (atom/cons x1 '()))
      ((1 1) (if-false '() (if (equal (car (cons x1 '())) '?)
                               (remb (cdr (cons x1 '())))
                               (cons (car (cons x1 '()))
                                     (remb (cdr (cons x1 '())))))))
      ((1 1 Q 1) (car/cons x1 '()))
      ((1 1 A 1) (cdr/cons x1 '()))
      ((1 1 E 1) (car/cons x1 '()))
      ((1 1 E 2 1) (cdr/cons x1 '()))
      ((1) (if-same (equal x1 '?)
                    (memb? (if (equal x1 '?)
                               (remb '())
                               (cons x1 (remb '()))))))
      ((1 A 1) (if-nest-A (equal x1 '?)
                          (remb '())
                          (cons x1 (remb '()))))
      ((1 E 1) (if-nest-E (equal x1 '?)
                          (remb '())
                          (cons x1 (remb '()))))
      ((1 A) (memb?/remb0))
      ((1 E) (memb? (cons x1 (remb '()))))
      ((1 E Q) (atom/cons x1 (remb '())))
      ((1 E) (if-false 'nil
                       (if (equal (car (cons x1 (remb '()))) '?)
                           't
                           (memb? (cdr (cons x1 (remb '())))))))
      ((1 E Q 1) (car/cons x1 (remb '())))
      ((1 E E 1) (cdr/cons x1 (remb '())))
      ((1 E E) (memb?/remb0))
      ((1 E) (if-nest-E (equal x1 '?) 't 'nil))
      ((1) (if-same (equal x1 '?) 'nil))
      (() (equal-same 'nil))))))

(defun dethm.memb?/remb2 ()
  (J-Bob/define
   (dethm.memb?/remb1)
   '(((dethm memb?/remb2 (x1 x2)
             (equal (memb? (remb (cons x2 (cons x1 '())))) 'nil))
      nil
      ((1 1) (remb (cons x2 (cons x1 '()))))
      ((1 1 Q) (atom/cons x2 (cons x1 '())))
      ((1 1) (if-false 'nil
                       (if (equal (car (cons x2 (cons x1 '()))) '?)
                           (remb (cdr (cons x2 (cons x1 '()))))
                           (cons (car (cons x2 (cons x1 '())))
                                 (remb (cdr (cons x2 (cons x1 '()))))))))
      ((1 1 Q 1) (car/cons x2 (cons x1 '())))
      ((1 1 A 1) (cdr/cons x2 (cons x1 '())))
      ((1 1 E 1) (car/cons x2 (cons x1 '())))
      ((1 1 E 2 1) (cdr/cons x2 (cons x1 '())))
      ((1) (if-same (equal x2 '?)
                    (memb? (if (equal x2 '?)
                               (remb (cons x1 '()))
                               (cons x2 (remb (cons x1 '())))))))
      ((1 A 1) (if-nest-A (equal x2 '?)
                          (remb (cons x1 '()))
                          (cons x2 (remb (cons x1 '())))))
      ((1 E 1) (if-nest-E (equal x2 '?)
                          (remb (cons x1 '()))
                          (cons x2 (remb (cons x1 '())))))
      ((1 A) (memb?/remb1 x1))
      ((1 E) (memb? (cons x2 (remb (cons x1 '())))))
      ((1 E Q) (atom/cons x2 (remb (cons x1 '()))))
      ((1 E) (if-false 'nil
                       (if (equal (car (cons x2 (remb (cons x1 '())))) '?)
                           't
                           (memb? (cdr (cons x2 (remb (cons x1 '()))))))))
      ((1 E Q 1) (car/cons x2 (remb (cons x1 '()))))
      ((1 E E 1) (cdr/cons x2 (remb (cons x1 '()))))
      ((1 E E) (memb?/remb1 x1))
      ((1 E) (if-nest-E (equal x2 '?) 't 'nil))
      ((1) (if-same (equal x2 '?) 'nil))
      (() (equal-same 'nil))))))

;; Chapter 6

(defun dethm.memb?/remb ()
  (J-Bob/define
   (dethm.memb?/remb2)
   '(((dethm memb?/remb (xs)
             (equal (memb? (remb xs)) 'nil))
      (list-induction xs)
      ((A 1 1) (remb xs))
      ((A 1 1) (if-nest-A (atom xs)
                          '()
                          (if (equal (car xs) '?)
                              (remb (cdr xs))
                              (cons (car xs) (remb (cdr xs))))))
      ((A 1) (memb? '()))
      ((A 1 Q) (atom '()))
      ((A 1) (if-true 'nil
                      (if (equal (car '()) '?)
                          't
                          (memb? (cdr '())))))
      ((A) (equal-same 'nil))
      ((E A 1 1) (remb xs))
      ((E A 1 1) (if-nest-E (atom xs)
                            '()
                            (if (equal (car xs) '?)
                                (remb (cdr xs))
                                (cons (car xs) (remb (cdr xs))))))
      ((E A 1) (if-same (equal (car xs) '?)
                        (memb? (if (equal (car xs) '?)
                                   (remb (cdr xs))
                                   (cons (car xs) (remb (cdr xs)))))))
      ((E A 1 A 1) (if-nest-A (equal (car xs) '?)
                              (remb (cdr xs))
                              (cons (car xs) (remb (cdr xs)))))
      ((E A 1 E 1) (if-nest-E (equal (car xs) '?)
                              (remb (cdr xs))
                              (cons (car xs) (remb (cdr xs)))))
      ((E A 1 E) (memb? (cons (car xs) (remb (cdr xs)))))
      ((E A 1 E Q) (atom/cons (car xs) (remb (cdr xs))))
      ((E A 1 E) (if-false 'nil
                           (if (equal (car (cons (car xs)
                                                 (remb (cdr xs))))
                                      '?)
                               't
                               (memb? (cdr (cons (car xs)
                                                 (remb (cdr xs))))))))
      ((E A 1 E Q 1) (car/cons (car xs) (remb (cdr xs))))
      ((E A 1 E E 1) (cdr/cons (car xs) (remb (cdr xs))))
      ((E A 1 E) (if-nest-E (equal (car xs) '?)
                            't
                            (memb? (remb (cdr xs)))))
      ((E A 1) (if-same (equal (car xs) '?) (memb? (remb (cdr xs)))))
      ((E A 1) (equal-if (memb? (remb (cdr xs))) 'nil))
      ((E A) (equal-same 'nil))
      ((E) (if-same (equal (memb? (remb (cdr xs))) 'nil) 't))
      (() (if-same (atom xs) 't))))))

;; Chapter 7

(defun defun.ctx? ()
  (J-Bob/define
   (dethm.memb?/remb)
   '(((defun ctx? (x)
        (if (atom x)
            (equal x '?)
            (if (ctx? (car x))
                't
                (ctx? (cdr x)))))
      (size x)
      ((Q) (natp/size x))
      (() (if-true (if (atom x)
                       't
                       (if (< (size (car x)) (size x))
                           (if (ctx? (car x))
                               't
                               (< (size (cdr x)) (size x)))
                           'nil))
                   'nil))
      ((E Q) (size/car x))
      ((E A E) (size/cdr x))
      ((E A) (if-same (ctx? (car x)) 't))
      ((E) (if-true 't 'nil))
      (() (if-same (atom x) 't))))))

(defun dethm.ctx?/sub ()
  (J-Bob/define
   (defun.ctx?)
   '(((dethm ctx?/t (x)
             (if (ctx? x)
                 (equal (ctx? x) 't)
                 't))
      (star-induction x)
      ((A Q) (ctx? x))
      ((A Q) (if-nest-A (atom x)
                        (equal x '?)
                        (if (ctx? (car x))
                            't
                            (ctx? (cdr x)))))
      ((A A 1) (ctx? x))
      ((A A 1) (if-nest-A (atom x)
                          (equal x '?)
                          (if (ctx? (car x))
                              't
                              (ctx? (cdr x)))))
      ((A A 1 1) (equal-if x '?))
      ((A A 1) (equal-same '?))
      ((A A) (equal-same 't))
      ((A) (if-same (equal x '?) 't))
      ((E A A Q) (ctx? x))
      ((E A A Q) (if-nest-E (atom x)
                            (equal x '?)
                            (if (ctx? (car x))
                                't
                                (ctx? (cdr x)))))
      ((E) (if-same (ctx? (car x))
                    (if (if (ctx? (car x))
                            (equal (ctx? (car x)) 't)
                            't)
                        (if (if (ctx? (cdr x))
                                (equal (ctx? (cdr x)) 't)
                                't)
                            (if (if (ctx? (car x))
                                    't
                                    (ctx? (cdr x)))
                                (equal (ctx? x) 't)
                                't)
                            't)
                        't)))
      ((E A Q) (if-nest-A (ctx? (car x))
                          (equal (ctx? (car x)) 't)
                          't))
      ((E A A A Q) (if-nest-A (ctx? (car x))
                              't
                              (ctx? (cdr x))))
      ((E E Q) (if-nest-E (ctx? (car x))
                          (equal (ctx? (car x)) 't)
                          't))
      ((E E A A Q) (if-nest-E (ctx? (car x))
                              't
                              (ctx? (cdr x))))
      ((E E) (if-true (if (if (ctx? (cdr x))
                              (equal (ctx? (cdr x)) 't)
                              't)
                          (if (ctx? (cdr x))
                              (equal (ctx? x) 't)
                              't)
                          't)
                      't))
      ((E A A A) (if-true (equal (ctx? x) 't) 't))
      ((E A A A 1) (ctx? x))
      ((E A A A 1) (if-nest-E (atom x)
                              (equal x '?)
                              (if (ctx? (car x))
                                  't
                                  (ctx? (cdr x)))))
      ((E A A A 1) (if-nest-A (ctx? (car x))
                              't
                              (ctx? (cdr x))))
      ((E A A A) (equal-same 't))
      ((E A A) (if-same (if (ctx? (cdr x))
                            (equal (ctx? (cdr x)) 't)
                            't)
                        't))
      ((E A) (if-same (equal (ctx? (car x)) 't) 't))
      ((E E A A 1) (ctx? x))
      ((E E A A 1) (if-nest-E (atom x)
                              (equal x '?)
                              (if (ctx? (car x))
                                  't
                                  (ctx? (cdr x)))))
      ((E E A A 1) (if-nest-E (ctx? (car x))
                              't
                              (ctx? (cdr x))))
      ((E E) (if-same (ctx? (cdr x))
                      (if (if (ctx? (cdr x))
                              (equal (ctx? (cdr x)) 't)
                              't)
                          (if (ctx? (cdr x))
                              (equal (ctx? (cdr x)) 't)
                              't)
                          't)))
      ((E E A Q) (if-nest-A (ctx? (cdr x))
                            (equal (ctx? (cdr x)) 't)
                            't))
      ((E E A A) (if-nest-A (ctx? (cdr x))
                            (equal (ctx? (cdr x)) 't)
                            't))
      ((E E A A 1) (equal-if (ctx? (cdr x)) 't))
      ((E E A A) (equal-same 't))
      ((E E A) (if-same (equal (ctx? (cdr x)) 't) 't))
      ((E E E Q) (if-nest-E (ctx? (cdr x))
                            (equal (ctx? (cdr x)) 't)
                            't))
      ((E E E) (if-true (if (ctx? (cdr x))
                            (equal (ctx? (cdr x)) 't)
                            't)
                        't))
      ((E E E) (if-nest-E (ctx? (cdr x))
                          (equal (ctx? (cdr x)) 't)
                          't))
      ((E E) (if-same (ctx? (cdr x)) 't))
      ((E) (if-same (ctx? (car x)) 't))
      (() (if-same (atom x) 't)))
     ((dethm ctx?/sub (x y)
             (if (ctx? x)
                 (if (ctx? y)
                     (equal (ctx? (sub x y)) 't)
                     't)
                 't))
      (star-induction y)
      (() (if-same (ctx? x)
                   (if (atom y)
                       (if (ctx? x)
                           (if (ctx? y)
                               (equal (ctx? (sub x y)) 't)
                               't)
                           't)
                       (if (if (ctx? x)
                               (if (ctx? (car y))
                                   (equal (ctx? (sub x (car y))) 't)
                                   't)
                               't)
                           (if (if (ctx? x)
                                   (if (ctx? (cdr y))
                                       (equal (ctx? (sub x (cdr y))) 't)
                                       't)
                                   't)
                               (if (ctx? x)
                                   (if (ctx? y)
                                       (equal (ctx? (sub x y)) 't)
                                       't)
                                   't)
                               't)
                           't))))
      ((A A) (if-nest-A (ctx? x)
                        (if (ctx? y)
                            (equal (ctx? (sub x y)) 't)
                            't)
                        't))
      ((A E Q) (if-nest-A (ctx? x)
                          (if (ctx? (car y))
                              (equal (ctx? (sub x (car y))) 't)
                              't)
                          't))
      ((A E A Q) (if-nest-A (ctx? x)
                            (if (ctx? (cdr y))
                                (equal (ctx? (sub x (cdr y))) 't)
                                't)
                            't))
      ((A E A A) (if-nest-A (ctx? x)
                            (if (ctx? y)
                                (equal (ctx? (sub x Y)) 't)
                                't)
                            't))
      ((E A) (if-nest-E (ctx? x)
                        (if (ctx? y)
                            (equal (ctx? (sub x y)) 't)
                            't)
                        't))
      ((E E Q) (if-nest-E (ctx? x)
                          (if (ctx? (car y))
                              (equal (ctx? (sub x (car y))) 't)
                              't)
                          't))
      ((E E A Q) (if-nest-E (ctx? x)
                            (if (ctx? (cdr y))
                                (equal (ctx? (sub x (cdr y))) 't)
                                't)
                            't))
      ((E E A A) (if-nest-E (ctx? x)
                            (if (ctx? y)
                                (equal (ctx? (sub x Y)) 't)
                                't)
                            't))
      ((E E A) (if-same 't 't))
      ((E E) (if-same 't 't))
      ((E) (if-same (atom y) 't))
      ((A A A 1 1) (sub x y))
      ((A A A 1 1) (if-nest-A (atom y)
                              (if (equal y '?) x y)
                              (cons (sub x (car y))
                                    (sub x (cdr y)))))
      ((A A A) (if-same (equal y '?)
                        (equal (ctx? (if (equal y '?) x y)) 't)))
      ((A A A A 1 1) (if-nest-A (equal y '?) x y))
      ((A A A E 1 1) (if-nest-E (equal y '?) x y))
      ((A A A A 1) (ctx?/t x))
      ((A A A A) (equal-same 't))
      ((A A A E 1) (ctx?/t y))
      ((A A A E) (equal-same 't))
      ((A A A) (if-same (equal y '?) 't))
      ((A A) (if-same (ctx? y) 't))
      ((A E A A A 1 1) (sub x y))
      ((A E A A A 1 1) (if-nest-E (atom y)
                                  (if (equal y '?) x y)
                                  (cons (sub x (car y))
                                        (sub x (cdr y)))))
      ((A E A A A 1) (ctx? (cons (sub x (car y)) (sub x (cdr y)))))
      ((A E A A A 1 Q) (atom/cons (sub x (car y)) (sub x (cdr y))))
      ((A E A A A 1) (if-false (equal (cons (sub x (car y))
                                            (sub x (cdr y)))
                                      '?)
                               (if (ctx? (car (cons (sub x (car y))
                                                    (sub x (cdr y)))))
                                   't
                                   (ctx? (cdr (cons (sub x (car y))
                                                    (sub x (cdr y))))))))
      ((A E A A A 1 Q 1) (car/cons (sub x (car y)) (sub x (cdr y))))
      ((A E A A A 1 E 1) (cdr/cons (sub x (car y)) (sub x (cdr y))))
      ((A E A A Q) (ctx? y))
      ((A E A A Q) (if-nest-E (atom y)
                              (equal y '?)
                              (if (ctx? (car y))
                                  't
                                  (ctx? (cdr y)))))
      ((A E) (if-same (ctx? (car y))
                      (if (if (ctx? (car y))
                              (equal (ctx? (sub x (car y))) 't)
                              't)
                          (if (if (ctx? (cdr y))
                                  (equal (ctx? (sub x (cdr y))) 't)
                                  't)
                              (if (if (ctx? (car y))
                                      't
                                      (ctx? (cdr y)))
                                  (equal (if (ctx? (sub x (car y)))
                                             't
                                             (ctx? (sub x (cdr y))))
                                         't)
                                  't)
                              't)
                          't)))
      ((A E A Q) (if-nest-A (ctx? (car y))
                            (equal (ctx? (sub x (car y))) 't)
                            't))
      ((A E A A A Q) (if-nest-A (ctx? (car y))
                                't
                                (ctx? (cdr y))))
      ((A E A A A) (if-true (equal (if (ctx? (sub x (car y)))
                                       't
                                       (ctx? (sub x (cdr y))))
                                   't)
                            't))
      ((A E E Q) (if-nest-E (ctx? (car y))
                            (equal (ctx? (sub x (car y))) 't)
                            't))
      ((A E E) (if-true (if (if (ctx? (cdr y))
                                (equal (ctx? (sub x (cdr y))) 't)
                                't)
                            (if (if (ctx? (car y))
                                    't
                                    (ctx? (cdr y)))
                                (equal (if (ctx? (sub x (car y)))
                                           't
                                           (ctx? (sub x (cdr y))))
                                       't)
                                't)
                            't)
                        't))
      ((A E E A Q) (if-nest-E (ctx? (car y))
                              't
                              (ctx? (cdr y))))
      ((A E A A A 1 Q) (equal-if (ctx? (sub x (car y))) 't))
      ((A E A A A 1) (if-true 't (ctx? (sub x (cdr y)))))
      ((A E A A A) (equal-same 't))
      ((A E A A) (if-same (if (ctx? (cdr y))
                              (equal (ctx? (sub x (cdr y))) 't)
                              't)
                          't))
      ((A E A) (if-same (equal (ctx? (sub x (car y))) 't) 't))
      ((A E E) (if-same (ctx? (cdr y))
                        (if (if (ctx? (cdr y))
                                (equal (ctx? (sub x (cdr y))) 't)
                                't)
                            (if (ctx? (cdr y))
                                (equal (if (ctx? (sub x (car y)))
                                           't
                                           (ctx? (sub x (cdr y))))
                                       't)
                                't)
                            't)))
      ((A E E A Q) (if-nest-A (ctx? (cdr y))
                              (equal (ctx? (sub x (cdr y))) 't)
                              't))
      ((A E E A A) (if-nest-A (ctx? (cdr y))
                              (equal (if (ctx? (sub x (car y)))
                                         't
                                         (ctx? (sub x (cdr y))))
                                     't)
                              't))
      ((A E E E Q) (if-nest-E (ctx? (cdr y))
                              (equal (ctx? (sub x (cdr y))) 't)
                              't))
      ((A E E E) (if-true (if (ctx? (cdr y))
                              (equal (if (ctx? (sub x (car y)))
                                         't
                                         (ctx? (sub x (cdr y))))
                                     't)
                              't)
                          't))
      ((A E E E) (if-nest-E (ctx? (cdr y))
                            (equal (if (ctx? (sub x (car y)))
                                       't
                                       (ctx? (sub x (cdr y))))
                                   't)
                            't))
      ((A E E A A 1 E) (equal-if (ctx? (sub x (cdr y))) 't))
      ((A E E A A 1) (if-same (ctx? (sub x (car y))) 't))
      ((A E E A A) (equal-same 't))
      ((A E E A) (if-same (equal (ctx? (sub x (cdr y))) 't) 't))
      ((A E E) (if-same (ctx? (cdr y)) 't))
      ((A E) (if-same (ctx? (car y)) 't))
      ((A) (if-same (atom y) 't))
      (() (if-same (ctx? x) 't))))))

;; Chapter 8

(defun defun.member? ()
  (J-Bob/define
   (dethm.ctx?/sub)
   '(((defun member? (x ys)
        (if (atom ys)
            'nil
            (if (equal x (car ys))
                't
                (member? x (cdr ys)))))
      (size ys)
      ((Q) (natp/size ys))
      (() (if-true (if (atom ys)
                       't
                       (if (equal x (car ys))
                           't
                           (< (size (cdr ys))
                              (size ys))))
                   'nil))
      ((E E) (size/cdr ys))
      ((E) (if-same (equal x (car ys)) 't))
      (() (if-same (atom ys) 't))))))

(defun defun.set? ()
  (J-Bob/define
   (defun.member?)
   '(((defun set? (xs)
        (if (atom xs)
            't
            (if (member? (car xs) (cdr xs))
                'nil
                (set? (cdr xs)))))
      (size xs)
      ((Q) (natp/size xs))
      (() (if-true (if (atom xs)
                       't
                       (if (member? (car xs) (cdr xs))
                           't
                           (< (size (cdr xs))
                              (size xs))))
                   'nil))
      ((E E) (size/cdr xs))
      ((E) (if-same (member? (car xs) (cdr xs)) 't))
      (() (if-same (atom xs) 't))))))

(defun defun.add-atoms ()
  (J-Bob/define
   (defun.set?)
   '(((defun add-atoms (x ys)
        (if (atom x)
            (if (member? x ys)
                ys
                (cons x ys))
            (add-atoms (car x)
                       (add-atoms (cdr x) ys))))
      (size x)
      ((Q) (natp/size x))
      (() (if-true (if (atom x)
                       't
                       (if (< (size (car x))
                              (size x))
                           (< (size (cdr x))
                              (size x))
                           'nil))
                   'nil))
      ((E Q) (size/car x))
      ((E) (if-true (< (size (cdr x)) (size x)) 'nil))
      ((E) (size/cdr x))
      (() (if-same (atom x) 't))))))

(defun defun.atoms ()
  (J-Bob/define
   (defun.add-atoms)
   '(((defun atoms (x)
        (add-atoms x '()))
      (size x)
      ((Q) (natp/size x))
      (() (if-true 't 'nil))))))

;; Chapter 9

(defun dethm.set?/atoms ()
  (J-Bob/define
   (defun.atoms)
   '(((dethm set?/t (xs)
             (if (set? xs)
                 (equal (set? xs) 't)
                 't))
      (set? xs)
      ((A Q) (set? xs))
      ((A Q) (if-nest-A (atom xs)
                        't
                        (if (member? (car xs) (cdr xs))
                            'nil
                            (set? (cdr xs)))))
      ((A) (if-true (equal (set? xs) 't) 't))
      ((A 1) (set? xs))
      ((A 1) (if-nest-A (atom xs)
                        't
                        (if (member? (car xs) (cdr xs))
                            'nil
                            (set? (cdr xs)))))
      ((A) (equal-same 't))
      ((E A Q) (set? xs))
      ((E A Q) (if-nest-E (atom xs)
                          't
                          (if (member? (car xs) (cdr xs))
                              'nil
                              (set? (cdr xs)))))
      ((E A Q) (if-nest-A (member? (car xs) (cdr xs))
                          'nil
                          (set? (cdr xs))))
      ((E A) (if-false (equal (set? xs) 't) 't))
      ((E E A Q) (set? xs))
      ((E E A Q) (if-nest-E (atom xs)
                            't
                            (if (member? (car xs) (cdr xs))
                                'nil
                                (set? (cdr xs)))))
      ((E E A Q) (if-nest-E (member? (car xs) (cdr xs))
                            'nil
                            (set? (cdr xs))))
      ((E E A A 1) (set? xs))
      ((E E A A 1) (if-nest-E (atom xs)
                              't
                              (if (member? (car xs) (cdr xs))
                                  'nil
                                  (set? (cdr xs)))))
      ((E E A A 1) (if-nest-E (member? (car xs) (cdr xs))
                              'nil
                              (set? (cdr xs))))
      ((E E) (if-same (set? (cdr xs))
                      (if (if (set? (cdr xs))
                              (equal (set? (cdr xs)) 't)
                              't)
                          (if (set? (cdr xs))
                              (equal (set? (cdr xs)) 't)
                              't)
                          't)))
      ((E E A Q) (if-nest-A (set? (cdr xs))
                            (equal (set? (cdr xs)) 't)
                            't))
      ((E E A A Q) (equal-if (set? (cdr xs)) 't))
      ((E E A A) (if-true (equal (set? (cdr xs)) 't) 't))
      ((E E A A 1) (equal-if (set? (cdr xs)) 't))
      ((E E A A) (equal-same 't))
      ((E E A) (if-same (equal (set? (cdr xs)) 't) 't))
      ((E E E Q) (if-nest-E (set? (cdr xs))
                            (equal (set? (cdr xs)) 't)
                            't))
      ((E E E) (if-true (if (set? (cdr xs))
                            (equal (set? (cdr xs)) 't)
                            't)
                        't))
      ((E E E) (if-nest-E (set? (cdr xs))
                          (equal (set? (cdr xs)) 't)
                          't))
      ((E E) (if-same (set? (cdr xs)) 't))
      ((E) (if-same (member? (car xs) (cdr xs)) 't))
      (() (if-same (atom xs) 't)))
     ((dethm set?/nil (xs)
             (if (set? xs)
                 't
                 (equal (set? xs) 'nil)))
      (set? xs)
      ((A Q) (set? xs))
      ((A Q) (if-nest-A (atom xs)
                        't
                        (if (member? (car xs) (cdr xs))
                            'nil
                            (set? (cdr xs)))))
      ((A) (if-true 't (equal (set? xs) 'nil)))
      ((E A Q) (set? xs))
      ((E A Q) (if-nest-E (atom xs)
                          't
                          (if (member? (car xs) (cdr xs))
                              'nil
                              (set? (cdr xs)))))
      ((E A Q) (if-nest-A (member? (car xs) (cdr xs))
                          'nil
                          (set? (cdr xs))))
      ((E A) (if-false 't (equal (set? xs) 'nil)))
      ((E E) (if-same (set? (cdr xs))
                      (if (if (set? (cdr xs))
                              't
                              (equal (set? (cdr xs)) 'nil))
                          (if (set? xs) 't (equal (set? xs) 'nil))
                          't)))
      ((E E A Q) (if-nest-A (set? (cdr xs))
                            't
                            (equal (set? (cdr xs)) 'nil)))
      ((E E A) (if-true (if (set? xs) 't (equal (set? xs) 'nil)) 't))
      ((E E E Q) (if-nest-E (set? (cdr xs))
                            't
                            (equal (set? (cdr xs)) 'nil)))
      ((E E A Q) (set? xs))
      ((E E A Q) (if-nest-E (atom xs)
                            't
                            (if (member? (car xs) (cdr xs))
                                'nil
                                (set? (cdr xs)))))
      ((E E A Q) (if-nest-E (member? (car xs) (cdr xs))
                            'nil
                            (set? (cdr xs))))
      ((E E A) (if-nest-A (set? (cdr xs))
                          't
                          (equal (set? xs) 'nil)))
      ((E E E A Q) (set? xs))
      ((E E E A Q) (if-nest-E (atom xs)
                              't
                              (if (member? (car xs) (cdr xs))
                                  'nil
                                  (set? (cdr xs)))))
      ((E E E A Q) (if-nest-E (member? (car xs) (cdr xs))
                              'nil
                              (set? (cdr xs))))
      ((E E E A) (if-nest-E (set? (cdr xs))
                            't
                            (equal (set? xs) 'nil)))
      ((E E E A 1) (set? xs))
      ((E E E A 1) (if-nest-E (atom xs)
                              't
                              (if (member? (car xs) (cdr xs))
                                  'nil
                                  (set? (cdr xs)))))
      ((E E E A 1) (if-nest-E (member? (car xs) (cdr xs))
                              'nil
                              (set? (cdr xs))))
      ((E E E A 1) (equal-if (set? (cdr xs)) 'nil))
      ((E E E A) (equal-same 'nil))
      ((E E E) (if-same (equal (set? (cdr xs)) 'nil) 't))
      ((E E) (if-same (set? (cdr xs)) 't))
      ((E A 1) (set? xs))
      ((E A 1) (if-nest-E (atom xs)
                          't
                          (if (member? (car xs) (cdr xs))
                              'nil
                              (set? (cdr xs)))))
      ((E A 1) (if-nest-A (member? (car xs) (cdr xs))
                          'nil
                          (set? (cdr xs))))
      ((E A) (equal-same 'nil))
      ((E) (if-same (member? (car xs) (cdr xs)) 't))
      (() (if-same (atom xs) 't)))
     ((dethm set?/add-atoms (a bs)
             (if (set? bs)
                 (equal (set? (add-atoms a bs)) 't)
                 't))
      (add-atoms a bs)
      ((A A 1 1) (add-atoms a bs))
      ((A A 1 1) (if-nest-A (atom a)
                            (if (member? a bs)
                                bs
                                (cons a bs))
                            (add-atoms (car a)
                                       (add-atoms (cdr a) bs))))
      ((A A 1) (if-same (member? a bs)
                        (set? (if (member? a bs)
                                  bs
                                  (cons a bs)))))
      ((A A 1 A 1) (if-nest-A (member? a bs)
                              bs
                              (cons a bs)))
      ((A A 1 E 1) (if-nest-E (member? a bs)
                              bs
                              (cons a bs)))
      ((A A 1 A) (set?/t bs))
      ((A A 1 E) (set? (cons a bs)))
      ((A A 1 E Q) (atom/cons a bs))
      ((A A 1 E E Q 1) (car/cons a bs))
      ((A A 1 E E Q 2) (cdr/cons a bs))
      ((A A 1 E E E 1) (cdr/cons a bs))
      ((A A 1 E E E) (set?/t bs))
      ((A A 1 E) (if-false 't (if (member? a bs) 'nil 't)))
      ((A A 1 E) (if-nest-E (member? a bs) 'nil 't))
      ((A A 1) (if-same (member? a bs) 't))
      ((A A) (equal-same 't))
      ((A) (if-same (set? bs) 't))
      ((E) (if-same (set? bs)
                    (if (if (set? (add-atoms (cdr a) bs))
                            (equal (set?
                                    (add-atoms
                                     (car a)
                                     (add-atoms (cdr a) bs)))
                                   't)
                            't)
                        (if (if (set? bs)
                                (equal (set? (add-atoms (cdr a) bs)) 't)
                                't)
                            (if (set? bs)
                                (equal (set? (add-atoms a bs)) 't)
                                't)
                            't)
                        't)))
      ((E A A Q) (if-nest-A (set? bs)
                            (equal (set? (add-atoms (cdr a) bs)) 't)
                            't))
      ((E A A A) (if-nest-A (set? bs)
                            (equal (set? (add-atoms a bs)) 't)
                            't))
      ((E E A Q) (if-nest-E (set? bs)
                            (equal (set? (add-atoms (cdr a) bs)) 't)
                            't))
      ((E E A) (if-true (if (set? bs)
                            (equal (set? (add-atoms a bs)) 't)
                            't)
                        't))
      ((E E A) (if-nest-E (set? bs)
                          (equal (set? (add-atoms a bs)) 't)
                          't))
      ((E E) (if-same (if (set? (add-atoms (cdr a) bs))
                          (equal (set?
                                  (add-atoms
                                   (car a)
                                   (add-atoms (cdr a) bs)))
                                 't)
                          't)
                      't))
      ((E A) (if-same (set? (add-atoms (cdr a) bs))
                      (if (if (set? (add-atoms (cdr a) bs))
                              (equal (set?
                                      (add-atoms
                                       (car a)
                                       (add-atoms (cdr a) bs)))
                                     't)
                              't)
                          (if (equal (set? (add-atoms (cdr a) bs)) 't)
                              (equal (set? (add-atoms a bs)) 't)
                              't)
                          't)))
      ((E A A Q) (if-nest-A (set? (add-atoms (cdr a) bs))
                            (equal (set?
                                    (add-atoms
                                     (car a)
                                     (add-atoms (cdr a) bs)))
                                   't)
                            't))
      ((E A A A Q 1) (set?/t (add-atoms (cdr a) bs)))
      ((E A A A Q) (equal-same 't))
      ((E A A A) (if-true (equal (set? (add-atoms a bs)) 't) 't))
      ((E A E Q) (if-nest-E (set? (add-atoms (cdr a) bs))
                            (equal (set?
                                    (add-atoms
                                     (car a)
                                     (add-atoms (cdr a) bs)))
                                   't)
                            't))
      ((E A E) (if-true (if (equal (set? (add-atoms (cdr a) bs)) 't)
                            (equal (set? (add-atoms a bs)) 't)
                            't)
                        't))
      ((E A E Q 1) (set?/nil (add-atoms (cdr a) bs)))
      ((E A E Q) (equal 'nil 't))
      ((E A E) (if-false (equal (set? (add-atoms a bs)) 't) 't))
      ((E A A A 1 1) (add-atoms a bs))
      ((E A A A 1 1) (if-nest-E (atom a)
                                (if (member? a bs)
                                    bs
                                    (cons a bs))
                                (add-atoms
                                 (car a)
                                 (add-atoms (cdr a) bs))))
      ((E A A A 1) (equal-if (set?
                              (add-atoms
                               (car a)
                               (add-atoms (cdr a) bs)))
                             't))
      ((E A A A) (equal-same 't))
      ((E A A) (if-same (equal (set?
                                (add-atoms
                                 (car a)
                                 (add-atoms (cdr a) bs)))
                               't)
                        't))
      ((E A) (if-same (set? (add-atoms (cdr a) bs)) 't))
      ((E) (if-same (set? bs) 't))
      (() (if-same (atom a) 't)))
     ((dethm set?/atoms (a)
             (equal (set? (atoms a)) 't))
      nil
      ((1 1) (atoms a))
      (() (if-true (equal (set? (add-atoms a '())) 't) 't))
      ((Q) (if-true 't (if (member? (car '()) (cdr '()))
                           'nil
                           (set? (cdr '())))))
      ((Q Q) (atom '()))
      ((Q) (set? '()))
      ((A 1) (set?/add-atoms a '()))
      ((A) (equal-same 't))
      (() (if-same (set? '()) 't))))))